// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import { useState, useEffect } from "react";

import { useNavigate } from "react-router-dom";

import abi from "../contract/validator.js";
import protonabi from "../contract/proton.js";

var ABI = JSON.parse(abi);
var protonABI = JSON.parse(protonabi);

//import { useMoralis, useMoralisFile} from "react-moralis";

//import InputField from './InputField';

//function HomeScam_() {

const HomeScam = (props) => {

  const validatorAddress = props.appState.valAddress;	
  const protonAddress = props.appState.protonAddress;

  useEffect(() => {
    const contract = new props.appState.watchweb3.eth.Contract(
      ABI,
      validatorAddress
    );

   const protonContract = new props.appState.watchweb3.eth.Contract(
      protonABI,
      protonAddress
    ); 	  

    //props.watchweb3.eth.getBlockNumber(function(error,response){
    //if(response)
    //{

    contract
      .getPastEvents("siteAdded", {
        //Block where contract was created. Ideally show data for 1 year?
        fromBlock: 26083674,
        toBlock: "latest",
      })
      .then(function (events) {
        for (
          let i = events.length - 1;
          i != -1 && i > events.length - 11;
          i--
        ) {
          let t = i;

          contract.methods
            .getSiteInfo(props.account,events[t].returnValues._url)
            .call({ from: props.account })
            .then(function (response, err) {
              console.log("response in HomeScam", response[3],response[4],response[1]);
              events[t].returnValues.yesVotes =
                response[3];
              events[t].returnValues.noVotes =
                response[4] ;
		    
              events[t].flag = false;
              events[t].userVote = response[5]
              if (t == 0 || t == events.length - 11) {
            
              contract.methods
            .valCount()
            .call({ from: props.account })
            .then(function (res1, err) {		      

		console.log("valCount",res1);
             
            props.setsiteData((prevState) => {
                  return {
                    ...prevState,
                    site: events,
                    valCount: res1
                  };
	          })

            if(props.account != "0x0000000000000000000000000000000000000000")
	     {	    
              protonContract.methods
            .balanceOf(props.account)
            .call({ from: props.account })
            .then(function (res2, err) {
               console.log("Account",props.account); 
               console.log("isValidator",res2);
	       let isValidator = false;	    
	        if(res2 >=  25)
                {
		   isValidator = true;
		}
		    
                props.setsiteData((prevState) => {
                  return {
                    ...prevState,
                    isValidator: isValidator   
                  };
                });
	      })
             }

             })		    
             }
            });
        }
      });
  }, [props.account]);

  const navigate = useNavigate();

  return (
    <div className="bg-img">
      {props.walletModal()}
      <div className="box bg-img">
        <div className="columns is-centered">
          <div className="column has-text-centered">
            <figure className="image ">
              <img src="banner.gif"></img>
            </figure>
            <figure className="image ">
              <img src="matrixshort.gif"></img>
            </figure>
            <div className="columns is-overlay is-centered">
              <div className="column is-6 has-text-centered">
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>

                <div className="columns">
                  <div className="column ">
                    <a
                      className="button is-large is-black "
                      onClick={() => {
                        if(props.account != "0x0000000000000000000000000000000000000000"){
                          navigate("/proposer")
                        } else {
                          props.activateModal()
                        }
                      }}
                    >
                      Report a Scam{" "}
                    </a>
                  </div>
                  <div className="column">
                    <a
	              disabled={props.siteData.isValidator == false}
                      className="button is-large is-link "
                      onClick={() => {
                        if(props.account != "0x0000000000000000000000000000000000000000" && props.siteData.isValidator == true){
                          navigate("/validator")
                        } else if (props.account == "0x0000000000000000000000000000000000000000") {
                          props.activateModal()
                        }
			  else
			{
			 window.alert("This account is not listed to a Scambuster validator. Please login with a validator account")
			}
                      }}
                    >
                      {" "}
                      Validator Login
                    </a>
                  </div>
                </div>

                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>
                <br></br>

                <div className="columns is-centered">
                  <div className="box bg-img">
                    <div class="panel-block has-text-white">
                      Recently Submit Websites
                    </div>
                               
                    <div>
                    {
                      props.siteData.site.map((site, index) => {
			      console.log(site.returnValues.yesVotes, site.returnValues.noVotes,props.siteData.valCount,"Votes");
			      let Yeah = ((site.returnValues.yesVotes/props.siteData.valCount)*100).toFixed(0);
			      let Naah  = ((site.returnValues.noVotes/props.siteData.valCount)*100).toFixed(0);
			      console.log( Yeah,Naah,"Votes %");
                      return (
                        <div key={index + 1}>
                          <div class="panel-block ">
                            <br></br>
                            <br></br>
                            <div className="column is-full has-text-centered">
                              
                                <div className="has-text-white">
                                  {" "}
                                  <div className="columns">
                                  <div className="column is-6 has-text-left">  
                                  {site.returnValues._url}
                                  </div>
                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                  <div className="column is-4 has-text-left">
                                  {Yeah  >= 50 ? (
                                    <span class="tag is-danger">Scam!</span>
                                  ) : Naah > 50 ? (
                                    <span class="tag is-success">Clean</span>
                                  ) : (
                                    <span class="tag is-info">
                                      Voting in progress
                                    </span>
                                  )}
                                  </div>
				      
                                  </div>
                                </div>
                            </div>
                          </div>
                        </div>
                      );
                    })}
                    </div>
                    
	           
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

//const HomeScam = React.forwardRef(HomeScam_);

export default HomeScam;
