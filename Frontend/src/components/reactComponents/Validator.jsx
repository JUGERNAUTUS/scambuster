// This is a skeleton starter React component generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import { useState, useEffect } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
//import "../sass/circularprogressbars.scss";
import { useNavigate } from "react-router-dom";
//import { useMoralis, useMoralisFile} from "react-moralis";

//import InputField from './InputField';

//import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';

import { Chart, ArcElement } from "chart.js";
import abi from "../contract/validator.js";
import protonabi from "../contract/proton.js";
import { Doughnut } from "react-chartjs-2";

var ABI = JSON.parse(abi);
var protonABI = JSON.parse(protonabi);

Chart.register(ArcElement);

function HomeValidator_(props) {
  const [pageState, setpageState] = useState({ one: "on" });

  const [siteData, setsiteData] = useState({ site: [] });
  
  const navigate = useNavigate();
  //const siteData = props.siteData;

  const [protonData, setprotonData] = useState({ balance: 0, circulation: 0 });

  const validatorAddress = props.appState.valAddress;
  const protonAddress = props.appState.protonAddress;
 
  const [inviteData, setinviteData] = useState({
    email: "",
    address: "",
    invites:0	  
  });


  useEffect(() => {
    
    if (!props.siteData.isValidator) {
     window.alert("This account is not listed to a Scambuster validator. Please login with a validator account")
     navigate("/")	    
    }
  }, []);	
 

   useEffect(() => {

    if(props.account != "0x0000000000000000000000000000000000000000")
    {	   
    const server = "localhost:7171";
    
    var url = props.appState.backend + "getInvites";
    var params = JSON.stringify({
      address: props.account
    });

    console.log("url", url);
    console.log(params, "params");
    fetch(url, {
      method: "POST",
      mode: "cors",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        authorization:
          "Bearer " + props.account.toLowerCase() + " " + props.appState.token,
      },
      body: params,
    })
      .then(function (response, error) {
	
       return response.json();	      

      }) .then(function (data) {
        console.log("Invites", data.invites);

	setinviteData((prevState) => {
                return {
                  ...prevState,
                  invites: data.invites
                };
              });      
      });
     }
     },[]) 

    useEffect(() => {
    //new props.web3.eth.Contract(ABI,validatorAddress);
    //if (props.account == "0x0000000000000000000000000000000000000000") {
      //console.log("No Web3");
      //props.activateModal();
    //} else {
      
	var contractProton = new props.web3.eth.Contract(
        protonABI,
        protonAddress
      );
     
      console.log("Reached here ", contractProton, props.account);

      contractProton.methods
        .balanceOf(props.account)
        .call({ from: props.account })
        .then(function (response, error) {
          console.log("response", response);
          let balance = response;

          contractProton.methods
            .totalSupply()
            .call({ from: props.account })
            .then(function (res, err) {
              console.log("res", res);

              let circulation = res;

              setprotonData((prevState) => {
                return {
                  ...prevState,
                  balance: balance,
                  circulation: circulation,
                };
              });
            });
        });
    },[]);

	/*
  useEffect(() => {
    
    if (!props.siteData.site) {
      
      var contract = new props.appState.watchweb3.eth.Contract(
        ABI,
        validatorAddress
      );

      //props.watchweb3.eth.getBlockNumber(function(error,response){
      //if(response)
      //{

      contract
        .getPastEvents("siteAdded", {
          fromBlock: 0,
          toBlock: "latest",
        })
        .then(function (events) {
          for (
            let i = events.length - 1;
            i != -1 && i > events.length - 11;
            i--
          ) {
            let t = i;

            contract.methods
              .getSiteInfo(props.account,events[t].returnValues._url)
              .call({ from: props.account })
              .then(function (response, err) {
                console.log("sitelist response is here", response);
                events[t].returnValues.yesVotes =
                  response.yesVotes / Math.pow(10, 18);
                events[t].returnValues.noVotes =
                  response.noVotes / Math.pow(10, 18);
                events[t].flag = false;
                events[t].userVote = response.voteStatus
                if (t == 0 || t == events.length - 11) {
                  props.setsiteData((prevState) => {
                    return {
                      ...prevState,
                      site: events,
                    };
                  });
                }
              });
          }
        });
    }
  },[]);
*/
  
useEffect(() => {
  
    let site = props.siteData.site
    console.log("Reached site");
    for (
            let i = site.length - 1;
            i != -1 && i > site.length - 11;
            i--
          ) {
            let t = i;
            
	      let comments = {};
                fetch(site[t].returnValues._comment)
                 .then(response => response.json())
                   .then(function (data) {
            
	            site[t].comments = data;
                                 
	         if(t==0 || t==site.length-10)
	           {		   
	            		   
   		    props.setsiteData((prevState) => {
      		    return {
        		...prevState,
        		site: site,
      			};
    		    });
	           }		   
                   })

    }
    },[]);

  const sendInvite = () => {
    
    if(inviteData.invites > 0)
    {	  
    const server = "localhost:7171";

    let app = this;
    var url = props.appState.backend + "/sendinvite";

    var params = JSON.stringify({
      to: inviteData.email,
      receiver: inviteData.address,
      sender: props.account	    
    });

    console.log("url", url);

    console.log(params, "params");

    fetch(url, {
      method: "POST",
      mode: "cors",

      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        authorization:
          "Bearer " + props.account.toLowerCase() + " " + props.appState.token,
      },
      body: params,
    })
      .then(function (response, error) {
        if (response.status == 200) {
          return response.json();
        } else if (response.status == 401) {
          props.handleSignMessage(props.account.toLowerCase(), props.web3);
        } else {
          console.log(error);
        }
      })
      .then(function (data) {
        console.log("Email response ", data);
	     
	      let tempstring = data.Status.slice(10,12);
              console.log(tempstring,"Email Response");
              if(tempstring == "Ok")
	        {
	      setinviteData((prevState) => {
                return {
                  ...prevState,
		  	
                  invites: data.invites
                };
              });
	  
	      alert("Email sent successfully!");
	      }
	      else
	      {
	      alert("Error sending email!");	      
	      }
 
      });
    }	    
  };


  const handleChange = (name) => {
    return (event) =>
      setinviteData((prevState) => {
        return {
          ...prevState,
          [name]: event.target.value,
        };
      });
  };

  const voteProposal = (url, vote) => {
    let contract = new props.web3.eth.Contract(ABI, validatorAddress);

    contract.methods
      .castVote(url, vote)
      .send({ from: props.account })
      .then(function (response, err) {
        if (response) {
          console.log("response", response);

          if (vote) alert("Voted scam for " + url);
          else alert("Voted clean for " + url);
        }
      });
  };

  const changeState = (index, flag) => {
    let site = props.siteData.site;
    console.log(flag, "flag");
    site[index].flag = flag;

    props.setsiteData((prevState) => {
      return {
        ...prevState,
        site: site,
      };
    });
  };

 const addComments = (index,comments) => {

    let site = props.siteData.site;
    site[index].comments = comments;
    
   props.setsiteData((prevState) => {
      return {
        ...prevState,
        site: site,
      };
    });
  };	

  return (
    <div>
      {props.walletModal()}	  
      <div className="columns">
        <div className="column"></div>
      </div>
      <div className="columns">
        <div className="column"></div>
      </div>
      <div className="columns">
        <div className="column"></div>
      </div>
      <div className="columns">
        <div className="column"></div>
      </div>
      <div className="columns">
        <div className="column"></div>
      </div>
      <div className="columns">
        <div className="column"></div>
      </div>
      <div className="box">
        <div className="columns">
          <div className="column has-text-centered is-offset-1 is-5">
            <div className="column is-full">
              <nav className="panel is-light">
                <p class="panel-heading is-centered">Submitted Websites</p>
	                 
                {props.siteData.site.map((site, index) => {
		   console.log("index",index);	
                  let ipfsURL = site.returnValues._screenshot;
		  //let ipfsURLComments = site.returnValues._comment;
                  
		  /*
		  let comments = {};
                fetch(ipfsURLComments)
                 .then(response => response.json())
                   .then(function (data) {
                   //addComments(index,data);  
		   })*/
                   
                   console.log("valCount",props.siteData.valCount);
		   //Check list of validators for total. It will not be 100, calculate percentage
                  let totalVotes = parseInt(site.returnValues.noVotes) + parseInt(site.returnValues.yesVotes);
		  //console.log("total Votes",totalVotes);	
                  let notvoted = props.siteData.valCount - totalVotes;
  
		  let Yeah = ((site.returnValues.yesVotes/props.siteData.valCount)*100).toFixed(0);
                  let Naah  = ((site.returnValues.noVotes/props.siteData.valCount)*100).toFixed(0);
                  console.log(Yeah,Naah,"Votes");
                  const dataChart = {
                    labels: ["Scam", "Clean", "Not Voted"],
                    datasets: [
                      {
                        label: "# of Votes",
                        data: [
                          site.returnValues.yesVotes,
                          site.returnValues.noVotes,
                          notvoted,
                        ],
                        backgroundColor: [
                          "rgba(255, 20, 10, 100)",
                          "rgba(32, 153, 32, 0.84)",
                          "rgba(239, 243, 239, 0.84)",
                        ],
                        borderColor: [
                          "rgba(255, 20, 10, 100)",
                          "rgba(32, 153, 32, 0.84)",
                          "rgba(239, 243, 239, 0.84)",
                        ],
                        borderWidth: 1,
                      },
                    ],
                  };

                  console.log("dataChart",dataChart);
                  console.log("comments",site.comments);
		 
                  return (
                    <div key={index + 1}>
                      <div class="panel-block ">
                        <br></br>
                        <br></br>
                        <div className="column is-4 is-offset-1 has-text-left">
                          {site.returnValues._url}
                          
                          </div>
                          <div className="column is-3  has-text-left">
			  {   Yeah  >= 50 ? 
                            <span class="tag is-danger">Scam!</span>
                             : Naah > 50 ? 
                            <span class="tag is-success">Clean</span>
                           : 
                            <span class="tag is-info">Voting in progress</span>
                          }
                        </div>

                        <div className="column is-2 is-offset-1">
                          <div className="columns">
                            <div className="column has-text-right">
                              {site.flag == true ? (
                                <a onClick={() => changeState(index, false)}>
                                  <FontAwesomeIcon icon="fa-solid fa-caret-down fa-3x" />
                                </a>
                              ) : (
                                <a onClick={() => changeState(index, true)}>
                                  <FontAwesomeIcon icon="fa-solid fa-caret-right fa-3x" />
                                </a>
                              )}
                            </div>
                            <div className="column is-4"></div>
                          </div>
                        </div>
                      </div>

                      {site.flag == true ? (
                        <div class="panel-block ">
			      
                          <div className="column has-text-centered">
			      			      
                            <div className="column is-4 has-text-centered is-offset-4">
			
                              <Doughnut data={dataChart} />
                              {Yeah >= 50 ? 
                                <b>Scam!</b>
                               : Naah >= 50 ? 
                                <b>Clean</b>
                               : 
                                <b>Voting in progress</b>
			      }
                            </div>
                            <b>Remarks</b>
                            <div className="column is-offset-2 has-text-left">
                              •{site.comments.commment1}<br></br>
			      •{site.comments.commment2}<br></br>
			      •{site.comments.commment3}<br></br>
                            </div>
                            <div className="column has-text-centered">
                              <a
                                href={ipfsURL}
                                target="_blank"
                              >
                                View Screenshot
                              </a>
                              <br></br>
                              <br></br>
                              {
                                site.userVote == 'Yes' || site.userVote == 'No'?
                                <div className="columns">
                                  Voted {site.userVote}!
                                <div className="column">
                                  <a
                                    className="button is-success"
                                    disabled
                                  >
                                    Vote "Clean"
                                  </a>
                                </div>
                                <div className="column">
                                  <a
                                    className="button is-danger"
                                    disabled
                                  >
                                    Vote "Scam"
                                  </a>
                                </div>
                              </div>: 
                              <div className="columns">
                                <div className="column">
                                  <a
                                    className="button is-success"
                                    onClick={() =>
                                      voteProposal(
                                        site.returnValues._url,
                                        false
                                      )
                                    }
                                  >
                                    Vote "Clean"
                                  </a>
                                </div>
                                <div className="column">
                                  <a
                                    className="button is-danger"
                                    onClick={() =>
                                      voteProposal(site.returnValues._url, true)
                                    }
                                  >
                                    Vote "Scam"
                                  </a>
                                </div>
                              </div>
                              }
                            </div>
                          </div>
                        </div>
                      ) : (
                        <div></div>
                      )}
                    </div>
                  );	   
                })}
              </nav>
            </div>
          </div>

          <div className="column has-text-centered is-5 ">
            <div className="column">
              <nav className="panel is-light">
                <p class="panel-heading is-centered">Proton Points</p>
                <br></br>
                <h1 className="title is-3">{protonData.balance} PTON</h1>
                Total Circulation : {protonData.circulation} PTON
                <br></br>
                <br></br>
              </nav>
            </div>

            <div className="column">
              <nav className="panel is-light">
                <p class="panel-heading is-centered">Invite a validator</p>
                
	       
                <div class="panel-block ">
                <div className="column">
	         {
	          inviteData.invites > 0?  		 
                  <div>
                    <span class="tag is-info">{inviteData.invites} invites left </span> 
                    <br></br>
                    <br></br> 
                    <label className="label is-family-secondary">
                      Email ID{" "}
                    </label>
                    <div className="control">
                      <input
                        className="input"
                        type="email"
                        placeholder="satoshi@bitcoin.com"
                        onChange={handleChange("email")}
			default={inviteData.email} 
                      />
                    </div>
		    <br></br>	 
		    <label className="label is-family-secondary">
                      MATIC Mainnet (Polygon) Address{" "}
                    </label>	
	             <div className="control">
                      <input
                        className="input"
                        type="text"
                        placeholder="0xB545A207759a397b5A4e24AF020DaBF619C7d809"
                        onChange={handleChange("address")}
			 
                      />
                    </div>
		    <br></br>
                     
	            <a
                      className="button is-success"
                      onClick={() => sendInvite()}
                    >
                      Send Invite
                    </a>		 
	            </div>:
	            <div>No Invites left!</div>		 
	          }		 
                    
                  </div>
                </div>
			
              </nav>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

const HomeValidator = React.forwardRef(HomeValidator_);

export default HomeValidator;
